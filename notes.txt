extraLagreArray
insert: 720.7982 ms
append: 2.2376 ms

largeArray
insert: 7.5501 ms
append: 393.8 µs

mediumArray
insert: 130.6 µs
append: 114.1 µs

smallArray
insert: 40 µs
append: 88.4 µs

tinyArray:
insert: 26.7 µs
append: 67 µs

The append function scales better, judging by the numbers for the append function comparing to the numbers for the insert function. Tiny(10) to small(100) scaled about 1/3, small(100) to mediun(1000) scaled about 1/4, medium(100) to large(10000) scaled a little less than 4 times, large(10000) to extra lagre(100000) scaled a little over 5 times.
Where insert fuctions scaled twice on tiny(10) to small(100), about 3 times for small(100) to medium(1000), about 60 times on medium(1000) to large(10000), and  about 100 times for lagre(10000) to extra lagre(100000).

The append function uses a .push() method inside a for loop. Big O of .push is O(1) and of for loop is O(n). That makes runtime complexity of the whole function O(n).
The insert function uses a .unshift() method and its Big O is O(n). Big O of a for loop in ths function is also O(n). Since .unshift() is nested inside of the for loop, Bio O of the whole function becomes O(n^2).
Runtime of O(n^2) is much slower that runtime of O(n), since the first one scales quadratically and the second linearly.